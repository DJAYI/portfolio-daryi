---

---

<header class="flex flex-col items-center w-full px-4">
  <h1
    class="text-5xl md:text-8xl font-bold font-header max-w-lg w-full text-center py-4 px-4 text-balance relative mix-blend-difference text-white"
  >
    Danilo Arenas Yi
  </h1>
  <h2
    class="text-lg md:text-2xl text-neutral-400 mt-3.5 mb-6 mix-blend-difference text-center"
  >
    Fullstack Developer with <span
      class="italic font-semibold mix-blend-difference text-white"
      >+1 Year Experience</span
    >
  </h2>
  <br />
  <div class="flex flex-col md:flex-row gap-3 md:gap-4 w-full md:w-auto">
    <a
      class="px-4 py-2 rounded-lg flex items-center justify-center gap-2.5 text-center w-full md:w-fit border border-neutral-800 font-semibold hover:scale-105 transition duration-200 bg-neutral-800 hover:ring-neutral-800 hover:shadow-lg group hover:bg-white text-white hover:text-neutral-800"
      href="https://www.linkedin.com/in/daryi/"
    >
      <!-- LinkedIn -->
      <svg
        preserveAspectRatio="xMidYMid"
        class="size-4 inline-block shrink-0"
        viewBox="0 0 256 256"
        ><path
          d="M218.123 218.127h-37.931v-59.403c0-14.165-.253-32.4-19.728-32.4-19.756 0-22.779 15.434-22.779 31.369v60.43h-37.93V95.967h36.413v16.694h.51a39.907 39.907 0 0 1 35.928-19.733c38.445 0 45.533 25.288 45.533 58.186l-.016 67.013ZM56.955 79.27c-12.157.002-22.014-9.852-22.016-22.009-.002-12.157 9.851-22.014 22.008-22.016 12.157-.003 22.014 9.851 22.016 22.008A22.013 22.013 0 0 1 56.955 79.27m18.966 138.858H37.95V95.967h37.97v122.16ZM237.033.018H18.89C8.58-.098.125 8.161-.001 18.471v219.053c.122 10.315 8.576 18.582 18.89 18.474h218.144c10.336.128 18.823-8.139 18.966-18.474V18.454c-.147-10.33-8.635-18.588-18.966-18.453"
          fill="#0A66C2"></path></svg
      >
      <span class="font-semibold text-sm md:text-base"
        >Connect with me on LinkedIn</span
      >
    </a>
    <a
      class="px-4 py-2 rounded-lg flex items-center justify-center gap-2 text-center border border-neutral-800 font-semibold w-full md:w-fit hover:scale-105 transition duration-200 bg-neutral-800 hover:ring-neutral-800 hover:shadow-lg hover:bg-white text-white hover:text-neutral-800"
      href="Danilo_Arenas_Yi_Resume.pdf"
    >
      <!-- Resume Icon -->
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="w-4 h-4 shrink-0"
      >
        <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"
        ></path>
        <polyline points="14 2 14 8 20 8"></polyline>
        <line x1="16" y1="13" x2="8" y2="13"></line>
        <line x1="16" y1="17" x2="8" y2="17"></line>
        <polyline points="10 9 9 9 8 9"></polyline>
      </svg>
      <span class="font-semibold text-sm md:text-base">See resume</span>
    </a>
  </div>
</header>

<script>
  import { gsap } from "gsap";
  import { SplitText } from "gsap/all";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  gsap.registerPlugin(SplitText);
  gsap.registerPlugin(ScrollTrigger);

  const h1 = document.querySelector("h1") as HTMLElement;
  const h2 = document.querySelector("h2") as HTMLElement;

  const split = new SplitText(h1, { type: "words,chars" });

  const tl = gsap.timeline();

  tl.from(split.chars, {
    duration: 1,
    filter: "blur(14px)",
    y: 20,
    ease: "power2.out",
    stagger: 0.06,
  });

  tl.from(
    h2,
    {
      duration: 1,
      y: 20,
      opacity: 0,
      ease: "power2.out",
    },
    "-=0.5"
  );

  // Solo aplicar animación de scroll en desktop
  const mediaQuery = window.matchMedia("(min-width: 768px)");

  const setupScrollAnimation = () => {
    if (mediaQuery.matches) {
      // Animación de scroll: mover letras hacia arriba cuando el scroll llega al 20%
      gsap.fromTo(
        split.chars,
        {
          y: 0, // Posición inicial explícita
        },
        {
          y: -300,
          ease: "power2.inOut",
          stagger: 0.04,
          scrollTrigger: {
            trigger: h1,
            start: "top 20%",
            end: "top 0%",
            scrub: 1,
            invalidateOnRefresh: true,
          },
        }
      );
    }
  };

  // Esperar a que termine la animación inicial antes de configurar el scroll
  tl.eventCallback("onComplete", () => {
    setupScrollAnimation();
  });

  // Reconfigurar animaciones en cambio de tamaño
  mediaQuery.addEventListener("change", () => {
    ScrollTrigger.getAll().forEach((trigger) => trigger.kill());
    gsap.set(split.chars, { y: 0 });
    setupScrollAnimation();
    ScrollTrigger.refresh();
  });
</script>
