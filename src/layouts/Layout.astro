---
import Experience from "../components/Experience.astro";
import Footer from "../components/Footer.astro";
import Header from "../components/Header.astro";
import SmokeParticles from "../components/SmokeParticles.astro";
import "../styles/global.css";

interface Props {
  title: string;
  description: string;
}

const { title, description } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="author" content="Danilo Arenas Yi" />
    <meta
      name="keywords"
      content="Danilo Arenas Yi, Fullstack Developer, Software Engineer, Web Development, React, Laravel, JavaScript, Portfolio"
    />
    <meta name="robots" content="index, follow" />
    <meta name="language" content="English" />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://daniloarenasyi.com/" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta
      property="og:image"
      content="https://daniloarenasyi.com/og-image.jpg"
    />
    <meta property="og:site_name" content="Danilo Arenas Yi - Portfolio" />

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:url" content="https://daniloarenasyi.com/" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta
      name="twitter:image"
      content="https://daniloarenasyi.com/twitter-image.jpg"
    />
    <meta name="twitter:creator" content="@daniloarenasyi" />

    <!-- Additional SEO -->
    <link rel="canonical" href="https://daniloarenasyi.com/" />
    <meta name="theme-color" content="#f5f5f5" />

    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link
      rel="stylesheet"
      href="https://unpkg.com/lenis@1.1.7/dist/lenis.css"
    />

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Michroma&display=swap"
      rel="stylesheet"
    />

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Major+Mono+Display&display=swap"
      rel="stylesheet"
    />

    <!-- Structured Data (JSON-LD) -->
    <script type="application/ld+json">
      {
        "@context": "https://schema.org",
        "@type": "Person",
        "name": "Danilo Arenas Yi",
        "jobTitle": "Fullstack Developer",
        "url": "https://portfolio-daryi.vercel.app/",
        "sameAs": [
          "https://www.linkedin.com/in/daryi/",
          "https://github.com/DJAYI"
        ],
        "knowsAbout": [
          "Web Development",
          "React",
          "Laravel",
          "JavaScript",
          "TailwindCSS",
          "PHP",
          "MySQL"
        ],
        "alumniOf": {
          "@type": "EducationalOrganization",
          "name": "Technological University Foundation Comfenalco"
        },
        "worksFor": {
          "@type": "Organization",
          "name": "Technological University Foundation Comfenalco"
        }
      }
    </script>

    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body class="bg-neutral-100">
    <div
      class="flex flex-col w-full min-h-screen py-4 items-center justify-center px-3.5"
      id="container"
    >
      <Header />
      <canvas id="canvas" class="-z-10"></canvas>
      <svg
        id="blob"
        viewBox="0 0 200 200"
        xmlns="http://www.w3.org/2000/svg"
        class="fixed -top-10 left-0 -z-30 mix-blend-exclusion"
      >
        <path
          fill="#ffffff"
          d="M60.6,-36.8C66.2,-25.4,49.7,-3.1,35.9,18C22.2,39.1,11.1,59.1,-5.3,62.1C-21.6,65.2,-43.2,51.3,-52.5,32.7C-61.8,14.2,-58.9,-9,-48.1,-23.5C-37.3,-38,-18.6,-43.7,4.5,-46.3C27.5,-48.8,55.1,-48.3,60.6,-36.8Z"
          transform="translate(100 100)"></path>
      </svg>
    </div>
    <div class="relative h-screen pt-0.5 w-full mt-20 pb-4 md:mt-60 px-2.5">
      <Experience />
      <Footer />
    </div>

    <SmokeParticles />
  </body>
</html>

<style>
  canvas {
    bottom: 0;
    left: 0;
    top: 100px;
    position: fixed;
    filter: brightness(1.1) contrast(1.1);
    mix-blend-mode: multiply;
    mask-image: radial-gradient(circle at 10% 30%, black 20%, transparent 80%);
    aspect-ratio: 600 / 1067;
    opacity: 0;
    will-change: transform, opacity;
    transition: filter 500ms ease;
  }

  /* Hide canvas on mobile devices */
  @media (max-width: 768px) {
    canvas {
      display: none;
    }
  }

  /* Applied when the canvas overlaps the SVG to invert colors */
  canvas.invert-filter {
    box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;
    filter: brightness(1.1) contrast(1.1) invert(1);
  }

  svg {
    transition: all 500ms ease;
  }

  /* Make SVG more visible when canvas is behind it */
  svg.highlighted {
    filter: drop-shadow(0 0 20px rgba(255, 255, 255, 0.8));
    transform: scale(1.1);
  }

  /* Mobile optimizations for SVG */
  @media (max-width: 768px) {
    svg {
      width: 60vw !important;
      max-width: 300px !important;
    }
  }
</style>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  import { PixiPlugin } from "gsap/all";
  import Lenis from "lenis";

  const canvas = document.getElementById("canvas") as HTMLCanvasElement;
  const ctx = canvas.getContext("2d")!;

  canvas.width = 600;
  canvas.height = 1067;

  const images: HTMLImageElement[] = [];
  const IMAGE_COUNT = 160;

  for (let i = 1; i <= IMAGE_COUNT; i++) {
    const img = new Image();

    img.src = `/images/danilo-360-turn/ezgif-frame-${String(i).padStart(
      3,
      "0"
    )}.jpg`;
    img.style.filter = "brightness(1.1)";
    img.style.mixBlendMode = "multiply";
    images.push(img);
  }

  function renderFrame(index: number) {
    if (!images[index] || !images[index].complete) return;
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.drawImage(images[index], 0, 0, canvas.width, canvas.height);
  }

  const lenis = new Lenis();

  lenis.on("scroll", ScrollTrigger.update);

  gsap.ticker.add((time) => {
    lenis.raf(time * 1000);
  });

  gsap.registerPlugin(ScrollTrigger);
  gsap.ticker.lagSmoothing(0);
  gsap.registerPlugin(PixiPlugin);

  ScrollTrigger.refresh();

  const tl = gsap.timeline({
    scrollTrigger: {
      trigger: "#container",
      start: "top top",
      end: "50%",
      scrub: true,
      invalidateOnRefresh: true,
    },
  });

  // Solo aplicar animaciones complejas en desktop
  const mediaQuery = window.matchMedia("(min-width: 768px)");

  if (mediaQuery.matches) {
    tl.to(
      { frame: 1 },
      {
        frame: IMAGE_COUNT - 1,
        ease: "easeInOut",

        onUpdate: function () {
          renderFrame(Math.floor(this.targets()[0].frame));
          canvas.style.opacity = "1";
        },
      }
    )
      .to(
        canvas,
        {
          x: `+=${window.innerWidth / 1.5}`,
          scale: 1.2,
          ease: "easeInOut",
        },
        "<"
      )
      .to(
        "#blob",
        {
          scale: 0.8,
          y: -350,
          ease: "none",
        },
        "<"
      );
  } else {
    // Animación de expansión del blob en mobile/tablet
    gsap.to("#blob", {
      scale: 10,
      y: 200,
      x: "+=100",
      rotation: 180,
      ease: "none",
      scrollTrigger: {
        trigger: "#container",
        start: "top top",
        end: "bottom center",
        scrub: 1.5,
        invalidateOnRefresh: true,
      },
    });
  }

  ScrollTrigger.refresh();

  const st = tl.scrollTrigger;

  function setInitialFrame() {
    const progress = st?.progress ?? 0;
    const idx = Math.floor(progress * (IMAGE_COUNT - 1));
    if (images[idx] && images[idx].complete) {
      renderFrame(idx);
      canvas.style.opacity = "1";
    } else if (images[0] && images[0].complete) {
      renderFrame(0);
      canvas.style.opacity = "1";
    }
  }

  setInitialFrame();

  images.forEach((img, i) => {
    img.addEventListener("load", () => {
      const progress = st?.progress ?? 0;
      const targetIdx = Math.floor(progress * (IMAGE_COUNT - 1));
      if (i === targetIdx) {
        renderFrame(i);
        canvas.style.opacity = "1";
      }
    });
  });

  // Detect overlap between canvas and svg and toggle an invert filter on the canvas
  const svgEl = document.querySelector("h1") as SVGElement | null;

  function rectsOverlap(a: DOMRect, b: DOMRect) {
    return !(
      b.right < a.left ||
      b.left > a.right ||
      b.bottom < a.top ||
      b.top > a.bottom
    );
  }

  function checkCanvasSvgOverlap() {
    // Solo verificar overlap en desktop donde el canvas es visible
    if (!svgEl || !mediaQuery.matches) return;
    const a = canvas.getBoundingClientRect();
    const b = svgEl.getBoundingClientRect();
    if (rectsOverlap(a, b)) {
      canvas.classList.add("invert-filter");
      svgEl.classList.add("highlighted");
    } else {
      canvas.classList.remove("invert-filter");
      svgEl.classList.remove("highlighted");
    }
  }

  if (mediaQuery.matches) {
    checkCanvasSvgOverlap();
    window.addEventListener("resize", checkCanvasSvgOverlap);
    gsap.ticker.add(checkCanvasSvgOverlap);
  }

  // Limpiar y reconfigurar en cambio de viewport
  mediaQuery.addEventListener("change", () => {
    ScrollTrigger.getAll().forEach((trigger) => trigger.kill());
    ScrollTrigger.refresh();
  });
</script>
